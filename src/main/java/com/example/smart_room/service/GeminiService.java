package com.example.smart_room.service;


import com.example.smart_room.common.ParsedCommand;
import com.example.smart_room.response.CommandResponse;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class GeminiService {

    @Value("${gemini.api.key}")
    private String geminiApiKey;

    @Value("${gemini.api.url}")
    private String geminiApiUrl;

    @Value("${gemini.model}")
    private String geminiModel;

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    public CommandResponse analyzeCommand(String userPrompt) {
        String fullPrompt = """
                B·∫°n l√† tr·ª£ l√Ω ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã th√¥ng minh trong nh√†.
                Ph√¢n t√≠ch c√¢u ng∆∞·ªùi d√πng v√† tr√≠ch xu·∫•t:
                - deviceKey (v√≠ d·ª•: light, temp, humidity, air, device.fan(0-100), device.lamp(ch·ªâ ƒë·ªÉ b·∫≠t t·∫Øt ON/OFF), device.door(ON/OFF), device.status-fan(Manual, Auto), device.status-lamp(Manual, Auto),...)
                - value n·∫øu l√† l·ªánh ƒëi·ªÅu khi·ªÉn (v√≠ d·ª•: "ON", "OFF", "20", "Manual", "Auto")
                - type: COMMAND ho·∫∑c QUERY

                Tr·∫£ v·ªÅ **ch·ªâ** JSON thu·∫ßn t√∫y, kh√¥ng bao quanh b·ªüi ```json hay b·∫•t k·ª≥ k√Ω t·ª± n√†o kh√°c, v·ªõi c·∫•u tr√∫c:
                {
                  "message": "th√¥ng b√°o th√¢n thi·ªán giao ti·∫øp cho ng∆∞·ªùi d√πng ",
                  "commands": [
                    {"deviceKey": "...", "value": "...", "type": "..."},
                    ...
                  ]
                }

                V√≠ d·ª•:
                - "B·∫≠t ƒë√®n ph√≤ng kh√°ch" -> {
                  "message": "Ok, m√¨nh ƒë√£ b·∫≠t ƒë√®n nh√©!",
                  "commands": [
                    {"deviceKey": "device.lamp", "value": "ON", "type": "COMMAND"}
                  ]
                }
                - "Thay ƒë·ªïi ƒë·ªô s√°ng th√†nh 50 v√† nhi·ªát ƒë·ªô l√† 24" -> {
                  "message": "Ok, m√¨nh ƒë√£ thay ƒë·ªïi ƒë·ªô s√°ng th√†nh 50 v√† nhi·ªát ƒë·ªô l√† 24, b·∫°n c·∫ßn gi√∫p g√¨ th√™m kh√¥ng!",
                  "commands": [
                    {"deviceKey": "light", "value": "50", "type": "COMMAND"},
                    {"deviceKey": "temp", "value": "24", "type": "COMMAND"}
                  ]
                }
                - "Nhi·ªát ƒë·ªô bao nhi√™u?" -> {
                  "message": "ƒêang ki·ªÉm tra nhi·ªát ƒë·ªô cho b·∫°n!",
                  "commands": [
                    {"deviceKey": "temp", "value": null, "type": "QUERY"}
                  ]
                }
                - "abc" -> {
                  "message": "L·ªánh kh√¥ng r√µ, b·∫°n mu·ªën m√¨nh l√†m g√¨?",
                  "commands": []
                }

                C√¢u ng∆∞·ªùi d√πng: "%s"
                """.formatted(userPrompt);

        try {
            // T·∫°o JSON payload
            ObjectNode payload = objectMapper.createObjectNode();

            // contents
            ObjectNode message = objectMapper.createObjectNode();
            ArrayNode parts = objectMapper.createArrayNode();
            ObjectNode part = objectMapper.createObjectNode();
            part.put("text", fullPrompt);
            parts.add(part);
            message.set("parts", parts);
            ArrayNode contents = objectMapper.createArrayNode();
            contents.add(message);
            payload.set("contents", contents);

            // generationConfig
            ObjectNode config = objectMapper.createObjectNode();
            config.put("temperature", 0.2);
            config.put("maxOutputTokens", 200);
            payload.set("generationConfig", config);

            // Headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(objectMapper.writeValueAsString(payload), headers);

            // URL
            String fullUrl = geminiApiUrl + "?key=" + geminiApiKey;

            // G·ª≠i request
            ResponseEntity<String> response = restTemplate.exchange(fullUrl, HttpMethod.POST, entity, String.class);

            // Log to√†n b·ªô
            System.out.println("üîç Full Gemini response: " + response.getBody());

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                JsonNode root = objectMapper.readTree(response.getBody());
                JsonNode textNode = root.path("candidates").get(0).path("content").path("parts").get(0).path("text");

                if (textNode.isMissingNode()) {
                    System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y n·ªôi dung trong ph·∫£n h·ªìi Gemini");
                    return new CommandResponse("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini", Collections.emptyList());
                }

                String jsonText = textNode.asText().trim();

                // Lo·∫°i b·ªè Markdown code block n·∫øu c√≥
                jsonText = jsonText.replaceAll("(?s)```json\\n(.*?)\\n```", "$1")
                        .replaceAll("(?s)```\\n(.*?)\\n```", "$1")
                        .trim();

                System.out.println("üß† Gemini content: " + jsonText);

                // Parse JSON
                JsonNode parsedJson;
                try {
                    parsedJson = objectMapper.readTree(jsonText);
                } catch (Exception e) {
                    System.err.println("‚ùå JSON kh√¥ng h·ª£p l·ªá: " + jsonText);
                    return new CommandResponse("JSON ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá", Collections.emptyList());
                }

                // Tr√≠ch xu·∫•t message
                String messageText = parsedJson.path("message").asText("X·ª≠ l√Ω th√†nh c√¥ng");

                // Tr√≠ch xu·∫•t commands
                List<ParsedCommand> commands = new ArrayList<>();
                JsonNode commandsNode = parsedJson.path("commands");

                if (commandsNode.isArray()) {
                    for (JsonNode item : commandsNode) {
                        String deviceKey = item.path("deviceKey").asText(null);
                        String value = item.has("value") && !item.get("value").isNull() ? item.get("value").asText() : null;
                        String type = item.path("type").asText(null);

                        if (deviceKey != null && type != null) {
                            commands.add(new ParsedCommand(deviceKey, value, type));
                        }
                    }
                }

                // Tr·∫£ v·ªÅ CommandResponse
                return new CommandResponse(messageText, commands.isEmpty() ? Collections.emptyList() : commands);
            } else {
                System.err.println("‚ùå Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Gemini: " + response.getStatusCode());
                return new CommandResponse("Ph·∫£n h·ªìi t·ª´ Gemini kh√¥ng h·ª£p l·ªá", Collections.emptyList());
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói x·ª≠ l√Ω Gemini: " + e.getMessage());
            e.printStackTrace();
            return new CommandResponse("L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω y√™u c·∫ßu", Collections.emptyList());
        }
    }
}