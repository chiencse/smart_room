package com.example.smart_room.service;


import com.example.smart_room.common.ParsedCommand;
import com.example.smart_room.response.CommandResponse;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class GeminiService {

    @Value("${gemini.api.key}")
    private String geminiApiKey;

    @Value("${gemini.api.url}")
    private String geminiApiUrl;

    @Value("${gemini.model}")
    private String geminiModel;

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    public CommandResponse analyzeCommand(String userPrompt) {
        String fullPrompt = """
    B·∫°n l√† tr·ª£ l√Ω ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã th√¥ng minh trong nh√† (SmartRoom), th√¢n thi·ªán, nhi·ªát t√¨nh v√† c√≥ kh·∫£ nƒÉng tr√≤ chuy·ªán t·ª± nhi√™n nh∆∞ con ng∆∞·ªùi.

    Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
    - Ph√¢n t√≠ch c√¢u h·ªèi ho·∫∑c m·ªánh l·ªánh t·ª´ ng∆∞·ªùi d√πng
    - Tr√≠ch xu·∫•t:
      - `deviceKey`: ch·ªâ ƒë·ªãnh thi·∫øt b·ªã c·∫ßn t∆∞∆°ng t√°c (v√≠ d·ª•: light, temp, humidity, air, device.fan(0-100), device.lamp(ON/OFF), device.door(ON/OFF), device.status-fan(Manual, Auto), ...)
      - `value`: gi√° tr·ªã ƒëi·ªÅu khi·ªÉn (n·∫øu c√≥), v√≠ d·ª•: "ON", "OFF", "20", "Auto"
      - `type`: "COMMAND" n·∫øu l√† l·ªánh ƒëi·ªÅu khi·ªÉn, "QUERY" n·∫øu l√† c√¢u h·ªèi c·∫ßn truy v·∫•n tr·∫°ng th√°i
    - **N·∫øu kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn, `commands` ph·∫£i l√† m·∫£ng r·ªóng**
    - `message`: lu√¥n lu√¥n l√† ph·∫£n h·ªìi ph√π h·ª£p v·ªõi √Ω ƒë·ªãnh ho·∫∑c n·ªôi dung ng∆∞·ªùi d√πng nh·∫≠p, k·ªÉ c·∫£ khi kh√¥ng c√≥ thi·∫øt b·ªã n√†o li√™n quan.
      - Ph·∫£n h·ªìi n√™n sinh ƒë·ªông, t·ª± nhi√™n, th√¢n thi·ªán, c√≥ th·ªÉ th√™m bi·ªÉu c·∫£m n·∫øu ph√π h·ª£p
      - Tr√°nh kh√¥ khan, c·ª©ng nh·∫Øc. N√™n d√πng ng√¥n ng·ªØ nh∆∞ m·ªôt ng∆∞·ªùi tr·ª£ l√Ω th·∫≠t s·ª± ƒëang tr√≤ chuy·ªán.

    **Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y**, kh√¥ng c√≥ ```json ho·∫∑c k√Ω t·ª± th·ª´a kh√°c. Format:
    {
      "message": "n·ªôi dung tr·∫£ l·ªùi ph√π h·ª£p v·ªõi c√¢u h·ªèi/l·ªánh ng∆∞·ªùi d√πng",
      "commands": [
        {"deviceKey": "...", "value": "...", "type": "..."}
      ]
    }

    V√≠ d·ª•:
    - "B·∫≠t ƒë√®n ph√≤ng kh√°ch" ->
    {
      "message": "ƒê√®n ph√≤ng kh√°ch ƒë√£ s√°ng r·ª±c r·ªìi ƒë√≥ b·∫°n! üí°",
      "commands": [
        {"deviceKey": "device.lamp", "value": "ON", "type": "COMMAND"}
      ]
    }

    - "Thay ƒë·ªïi ƒë·ªô s√°ng th√†nh 50 v√† nhi·ªát ƒë·ªô l√† 24" ->
    {
      "message": "Xong r·ªìi n√®! ƒê√®n s√°ng 50 ph·∫ßn trƒÉm v√† nhi·ªát ƒë·ªô ph√≤ng gi·ªù l√† 24 ƒë·ªô. M√°t m·∫ª d·ªÖ ch·ªãu l·∫Øm ƒë√≥! ‚ùÑÔ∏è",
      "commands": [
        {"deviceKey": "light", "value": "50", "type": "COMMAND"},
        {"deviceKey": "temp", "value": "24", "type": "COMMAND"}
      ]
    }

    - "Nhi·ªát ƒë·ªô bao nhi√™u?" ->
    {
      "message": "ƒê·ªÉ m√¨nh ki·ªÉm tra nh√©... üì° Nhi·ªát ƒë·ªô hi·ªán t·∫°i s·∫Ω hi·ªÉn th·ªã ngay!",
      "commands": [
        {"deviceKey": "temp", "value": null, "type": "QUERY"}
      ]
    }

    - "B·∫°n kh·ªèe kh√¥ng?" ->
    {
      "message": "C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi ü•∞! M√¨nh l√∫c n√†o c≈©ng s·∫µn s√†ng h·ªó tr·ª£ b·∫°n ƒëi·ªÅu khi·ªÉn ng√¥i nh√† th√¥ng minh!",
      "commands": []
    }

    - "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?" ->
    {
      "message": "M√¨nh ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi d·ªØ li·ªáu th·ªùi ti·∫øt, nh∆∞ng c√≥ th·ªÉ gi√∫p b·∫°n ki·ªÉm tra nhi·ªát ƒë·ªô trong nh√† nh√©! üå§Ô∏è",
      "commands": []
    }

    C√¢u ng∆∞·ªùi d√πng: "%s"
    """.formatted(userPrompt);



        try {
            // T·∫°o JSON payload
            ObjectNode payload = objectMapper.createObjectNode();

            // contents
            ObjectNode message = objectMapper.createObjectNode();
            ArrayNode parts = objectMapper.createArrayNode();
            ObjectNode part = objectMapper.createObjectNode();
            part.put("text", fullPrompt);
            parts.add(part);
            message.set("parts", parts);
            ArrayNode contents = objectMapper.createArrayNode();
            contents.add(message);
            payload.set("contents", contents);

            // generationConfig
            ObjectNode config = objectMapper.createObjectNode();
            config.put("temperature", 0.2);
            config.put("maxOutputTokens", 200);
            payload.set("generationConfig", config);

            // Headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(objectMapper.writeValueAsString(payload), headers);

            // URL
            String fullUrl = geminiApiUrl + "?key=" + geminiApiKey;

            // G·ª≠i request
            ResponseEntity<String> response = restTemplate.exchange(fullUrl, HttpMethod.POST, entity, String.class);

            // Log to√†n b·ªô
            System.out.println("üîç Full Gemini response: " + response.getBody());

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                JsonNode root = objectMapper.readTree(response.getBody());
                JsonNode textNode = root.path("candidates").get(0).path("content").path("parts").get(0).path("text");

                if (textNode.isMissingNode()) {
                    System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y n·ªôi dung trong ph·∫£n h·ªìi Gemini");
                    return new CommandResponse("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini", Collections.emptyList());
                }

                String jsonText = textNode.asText().trim();

                // Lo·∫°i b·ªè Markdown code block n·∫øu c√≥
                jsonText = jsonText.replaceAll("(?s)```json\\n(.*?)\\n```", "$1")
                        .replaceAll("(?s)```\\n(.*?)\\n```", "$1")
                        .trim();

                System.out.println("üß† Gemini content: " + jsonText);

                // Parse JSON
                JsonNode parsedJson;
                try {
                    parsedJson = objectMapper.readTree(jsonText);
                } catch (Exception e) {
                    System.err.println("‚ùå JSON kh√¥ng h·ª£p l·ªá: " + jsonText);
                    return new CommandResponse("JSON ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá", Collections.emptyList());
                }

                // Tr√≠ch xu·∫•t message
                String messageText = parsedJson.path("message").asText("X·ª≠ l√Ω th√†nh c√¥ng");

                // Tr√≠ch xu·∫•t commands
                List<ParsedCommand> commands = new ArrayList<>();
                JsonNode commandsNode = parsedJson.path("commands");

                if (commandsNode.isArray()) {
                    for (JsonNode item : commandsNode) {
                        String deviceKey = item.path("deviceKey").asText(null);
                        String value = item.has("value") && !item.get("value").isNull() ? item.get("value").asText() : null;
                        String type = item.path("type").asText(null);

                        if (deviceKey != null && type != null) {
                            commands.add(new ParsedCommand(deviceKey, value, type));
                        }
                    }
                }

                // Tr·∫£ v·ªÅ CommandResponse
                return new CommandResponse(messageText, commands.isEmpty() ? Collections.emptyList() : commands);
            } else {
                System.err.println("‚ùå Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Gemini: " + response.getStatusCode());
                return new CommandResponse("Ph·∫£n h·ªìi t·ª´ Gemini kh√¥ng h·ª£p l·ªá", Collections.emptyList());
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói x·ª≠ l√Ω Gemini: " + e.getMessage());
            e.printStackTrace();
            return new CommandResponse("L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω y√™u c·∫ßu", Collections.emptyList());
        }
    }
}